name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            shell: bash
          - os: ubuntu-latest
            shell: zsh
          - os: windows-latest
            shell: pwsh
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: true
          root_directory: app
      - uses: actions/setup-rust@v3  # Update to @v3
        with:
          rust-version: 'stable'
      - run: rustup component add clippy
        shell: ${{ matrix.shell }}
      - run: cargo clippy --workspace -- -D warnings
        shell: ${{ matrix.shell }}
      - run: cargo check --workspace
        shell: ${{ matrix.shell }}
      - run: pnpm --dir app run lint
        shell: ${{ matrix.shell }}
      - run: pnpm --dir app exec tsc --noEmit
        shell: ${{ matrix.shell }}
      - run: cargo test --workspace --verbose
        shell: ${{ matrix.shell }}
      - run: pnpm --dir app run typedoc
        shell: ${{ matrix.shell }}
      - run: cargo doc --workspace --no-deps
        shell: ${{ matrix.shell }}
        
  windows-package:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-rust@v2
        with:
          rust-version: 'stable'
      - uses: Swatinem/rust-cache@v2
      - name: Build one-click EXE
        run: pwsh scripts/build_windows.ps1
      - name: Sign EXE
        if: env.WINDOWS_CERT != ''
        run: signtool sign /fd SHA256 /a /f $env:WINDOWS_CERT dist\clappy.exe
      - uses: actions/upload-artifact@v4
        with:
          path: dist/clappy.exe
  macos-package:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-rust@v3
        with:
          rust-version: 'stable'
      - name: Build dmg
        run: bash scripts/build_macos.sh
      - name: Sign dmg
        if: env.APPLE_CERT != ''
        run: codesign --timestamp --sign "$APPLE_CERT" target/release/bundle/dmg/*.dmg
      - uses: actions/upload-artifact@v4
        with:
          path: target/release/bundle/dmg/*.dmg

  sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-rust@v3
        with:
          rust-version: 'stable'
      - run: bash scripts/generate_sbom.sh
      - uses: actions/upload-artifact@v4
        with:
          path: sbom.xml*
